--Author : Sri Gayatri Sundara Padmanabhan
--EECS 368
--project 2

import Data.List
--Inputs
a::[Int]
a= [4,0,5,3,0,1,7,1,7,0,0,0,0,0,0,0,6,0,0,5,2,1,2,3,0,0,0,5,6,0,7,4,0,1,3,0,0,0,0,0,0,0,1,4,0,6,0,7,0]
b::[Int]
b= [0,1,0,7,6,0,0,4,0,0,1,0,0,0,0,0,6,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,4,0,0,0,0,0]
c::[Int]
c= [4,1,2,3,6,0,0,0,0,0,0,1,0,0,0,1,7,4,0,0,2,0,0,0,0,1,0,5,3,0,0,4,0,0,0,0,7,0,0,0,0,0,0,1,2,0,0,0,0]
d::[Int]
d= [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0]
e::[Int]
e= [5,0,0,0,1,6,0,0,0,0,3,0,0,0,7,0,6,2,1,0,0,0,1,7,0,0,6,0,0,5,0,3,6,7,2,0,0,2,1,0,0,4,0,0,4,0,0,1,0] 
f::[Int]
f= [0,0,3,7,6,1,4,4,0,5,1,7,0,0,0,2,6,0,4,5,3,1,0,0,2,0,0,5,6,0,7,0,0,2,3,2,3,0,7,6,0,0,0,4,5,6,1,7,0] 
g::[Int]
g= [0,1,2,0,6,0,0,0,0,7,1,0,0,0,0,0,6,0,0,0,0,1,0,0,0,0,0,0,6,0,0,0,0,2,0,2,3,0,0,6,0,0,1,4,0,0,0,0,0] 
h::[Int]
h= [0,0,0,7,6,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0]
s::[Int]
s = [5,4,7,2,1,6,3,6,5,4,3,7,2,1,7,3,6,2,1,5,4,2,1,7,5,4,6,3,1,5,4,3,6,7,2,7,6,2,1,3,5,4,3,5,4,7,2,1,6]
--Main function
main = putStrLn $ show(lotusSolver a)

--Input: list of Int, the board
--Output: Solved puzzle
--calls solve function by passing in te board
lotusSolver :: [Int] -> [Int]
lotusSolver board = solve board 0

--Input: takes in a list (board)
--Output: a list containing all the ring values in seperate list
-- Produces list of rings of a given board
getRings :: [a] -> [[a]]
getRings [] = []
getRings xs = (take 7 xs):(getRings (drop 7 xs))

--Input: takes in an int value and a list (board)
--Output: the list containing all the values for 1 ring
--Grabs a ring from the set of all rings at a particular index
getRing :: Int -> [a] -> [a]
getRing index set = (getRings set) !! index

--Input: takes in an int value and a list (board)
--Output: a list that has all arc values for a single arc
--Produces an arc for a state starting at a particular index
anArc :: [a] -> Int -> [a]
anArc xs x =
	if x < 4 
		then [(xs !! x)] ++ (take 1 (drop (7+x) xs)) ++ (take 1 (drop (15+x) xs)) ++ (take 1 (drop (22+x) xs)) ++ (take 1 (drop (30+x) xs)) ++ (take 1 (drop (37+x) xs)) ++ (take 1 (drop (45+x) xs))
		else if x == 4 then [(xs !! x)] ++ (take 1 (drop (7+x) xs)) ++ (take 1 (drop (15+x) xs)) ++ (take 1 (drop (22+x) xs)) ++ (take 1 (drop (30+x) xs)) ++ (take 1 (drop (37+x) xs)) ++ (take 1 (drop (38+x) xs))
			else if x == 5 then [(xs !! x)] ++ (take 1 (drop (7+x) xs)) ++ (take 1 (drop (15+x) xs)) ++ (take 1 (drop (22+x) xs)) ++ (take 1 (drop (23+x) xs)) ++ (take 1 (drop (30+x) xs)) ++ (take 1 (drop (38+x) xs))
				else [(xs !! x)] ++ (take 1 (drop (7+x) xs)) ++ (take 1 (drop (8+x) xs)) ++ (take 1 (drop (15+x) xs)) ++ (take 1 (drop (23+x) xs)) ++ (take 1 (drop (30+x) xs)) ++ (take 1 (drop (38+x) xs))

--Input: takes in an int value and a list (board) and an index
--Output: the list containing the given value inserted
--Inserts an element at a given index in a list
inserter :: Int -> [a] -> a -> [a]
inserter n
 xs newElement = take n xs ++ [newElement] ++ drop (n + 1) xs
 	
--Input: takes in a list (board)
--Output: true if no duplicates present. false if duplicates are present
--Checks for duplicates of [1..7] in any given list
isValidsub :: [Int] -> Bool
isValidsub state
	|length (filter (==1) state) > 1 = False
	|length (filter (==2) state) > 1 = False
	|length (filter (==3) state) > 1 = False
	|length (filter (==4) state) > 1 = False
	|length (filter (==5) state) > 1 = False
	|length (filter (==6) state) > 1 = False
	|length (filter (==7) state) > 1 = False
	|otherwise = True 

--Input: takes in an int value and a list (board)
--Output: true is the board is in a valid state, false otherwise
-- Checks if the board is in a valid state
isValid :: Int -> [Int] ->Bool
isValid i board
	|board == [] = False
	|check_everything board = True
	|otherwise = False

--Input: takes in a list (board)
--Output: true if no duplicates present in all arcs and rings
-- Checks if all the arcs and rings dont have duplicates
check_everything :: [Int] -> Bool
check_everything board 
	|isValidsub (getRing 0 board) && isValidsub (getRing 1 board) && isValidsub (getRing 2 board) && isValidsub (getRing 3 board) && isValidsub (getRing 4 board) && isValidsub (getRing 5 board) && isValidsub (getRing 6 board) && isValidsub (anArc board 0) && isValidsub (anArc board 1) && isValidsub (anArc board 2) && isValidsub (anArc board 3) && isValidsub (anArc board 4) && isValidsub (anArc board 5) && isValidsub (anArc board 6) = True
	|otherwise = False
		
--Input: takes in an int (index) and a list (board)
--Output: the list of solved puzzle. [] otherwise
-- Solves the puzzle by recursively calling itself.
solve ::[Int] -> Int -> [Int]
solve board i
	|(isValid 0 board) == False = board --if isValid is false, stop checking and simply return board
	|i == 49 = board --if index is more than 48, return board
	|board!!i /= 0 = solve board (i+1) --if the index doesn't have 0 in it, recurse by passing the next index
	|isValid 0 a1 = a1
	|isValid 0 a2 = a2
	|isValid 0 a3 = a3
	|isValid 0 a4 = a4
	|isValid 0 a5 = a5
	|isValid 0 a6 = a6
	|isValid 0 a7 = a7
	|otherwise = []
	where a1 = solve (inserter i board 1) (i+1) 
	      a2 = solve (inserter i board 2) (i+1)
	      a3 = solve (inserter i board 3) (i+1)
	      a4 = solve (inserter i board 4) (i+1)
	      a5 = solve (inserter i board 5) (i+1)
	      a6 = solve (inserter i board 6) (i+1)
	      a7 = solve (inserter i board 7) (i+1)
		  -- if index has a 0 in it, check for valid values, try inserting values, increment the index and recurse